import random
import sys
import os

def generate_clause(n_vars, length):
    vars_in_clause = random.sample(range(1, n_vars + 1), length)
    return [random.choice([-1, 1]) * var for var in vars_in_clause]

def get_unique_filename(folder, tag):
    os.makedirs(folder, exist_ok=True)
    index = 0
    while True:
        filename = os.path.join(folder, f"{tag}_{index:03d}.cnf")
        if not os.path.exists(filename):
            return filename
        index += 1

def generate_input_file(n_vars, n_clauses, min_clause_len=None, fixed_clause_len=None,
                        folder='inputs'):
    clause_len_desc = (
        f"exact{fixed_clause_len}" if fixed_clause_len else
        f"range{min_clause_len}_to_{n_vars}" if min_clause_len else
        f"rand1_to_{n_vars}"
    )
    tag_suffix = f"vars{n_vars}_clauses{n_clauses}_{clause_len_desc}"
    filename = get_unique_filename(folder, f"input_{tag_suffix}")

    with open(filename, 'w') as f:
        f.write(f"c CNF formula generated by generate_input.py\n")
        f.write(f"c Number of variables: {n_vars}\n")
        f.write(f"c Intended number of clauses: {n_clauses}\n")
        f.write(f"c Clause length mode: {clause_len_desc}\n")

        actual_clauses = []

        for _ in range(n_clauses):
            length = (
                fixed_clause_len if fixed_clause_len else
                random.randint(min_clause_len, n_vars) if min_clause_len else
                random.randint(1, n_vars)
            )
            actual_clauses.append(generate_clause(n_vars, length))

        f.write(f"p cnf {n_vars} {len(actual_clauses)}\n")
        for clause in actual_clauses:
            f.write(' '.join(map(str, clause)) + " 0\n")

    print(f"Generated: '{filename}' ({len(actual_clauses)} clauses)")

if __name__ == '__main__':
    argc = len(sys.argv)

    if argc < 3:
        print("Usage: python generate_input.py <n_vars> <n_clauses> [gen_mode] [folder]")
        print("  [gen_mode]: Optional. 'fixed:k' length or minimum clause length.")
        print("  [folder]: Optional. Output folder name,  by default 'inputs/'.")
        sys.exit(1)

    try:
        n_vars = int(sys.argv[1])
        n_clauses = int(sys.argv[2])
    except ValueError:
        sys.exit("Error: <n_vars> and <n_clauses> must be integers.")

    gen_mode = sys.argv[3] if argc > 3 else None
    folder = sys.argv[4] if argc > 4 else "inputs"

    fixed_clause_len = None
    min_clause_len = None

    if gen_mode:
        if gen_mode.startswith("fixed:"):
            try:
                fixed_clause_len = int(gen_mode.split(":")[1])
            except ValueError:
                sys.exit("Error: Invalid fixed clause length format.")
        elif gen_mode.isdigit():
            min_clause_len = int(gen_mode)
        else:
            sys.exit("Error: gen_mode must be 'fixed:k' or an integer.")

    if n_vars <= 0 or n_clauses <= 0:
        sys.exit("Error: n_vars and n_clauses must be > 0")
    if fixed_clause_len and (fixed_clause_len <= 0 or fixed_clause_len > n_vars):
        sys.exit("Error: fixed clause length must be 1 <= k <= n_vars")
    if min_clause_len and (min_clause_len <= 0 or min_clause_len > n_vars):
        sys.exit("Error: min clause length must be 1 <= k <= n_vars")

    generate_input_file(n_vars, n_clauses, min_clause_len, fixed_clause_len, folder)
